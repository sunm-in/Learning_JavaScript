{
  /**
   * 🔍 프로토타입
   * 자바스크립트는 명령형(imperative), 함수형(functional), 프로토타입 기반(prototype-based),
   * 객체지향 프로그래밍(OOP;Object Oriented Programming)을 지원하는 멀티 패러다임 프로그래밍 언어다.
   *
   * 클래스 기반  객체지향 프로그래밍 언어의 특징인 클래스와 상속, 캡슐화를 위한 키워드인 public, private, protected 등이 없어서
   * 자바스크립트는 객체지향 언어가 아니라고 오해(자바스크립트는 가장 많은 오해를 받는 언어다)하는 경우도 있다.
   * 하지만 자바스크립트는 클래스 기반 객체지향 프로그래밍 언어보다 효율적이며 더 강력한 객체지향 프로그래밍 능력을 지니고 있는
   * 프로토타입 기반의 객체지향 프로그래밍 언어다.
   *
   *
   * 👀 클래스(class)
   * ES6에서 클래스가 도입되었다.
   * 자바스크립트는 객체 기반의 프로그래밍 언어이며  (자바스크립트를 이루고 있는 거의"모든 것"이 객체다.✅)
   * 원시 타입의 값을 제외한 나머지 값들(함수, 배열, 정규 표현식 등)은 모두 객체다.
   *
   *
   * 객체지향 프로그래밍은 실세계의 실체(사물이나 개념)를 인식하는 철학적 사고를 프로그래밍에 접목하려는 시도에서 시작한다.
   * 실체는 특징이나 성질을 나타내는  ✅속성(attribute/property)을 가지고 있고, 이를 통해 실체를 인식하거나 구별할 수 있다.
   *
   * ex) 사람은 이름, 주소, 성별, 나이, 신장, 체중, 학력, 성격, 직업 등 다양한 속성을 갖는다.
   * 이때 "이름이 아무개이고 성병를 여성이며 나이는 20세인 사람"과 같이 속성을 구체적으로 표현하면 특정한 사람들 다른 사람과 구별하여 인식할 수 있다.
   *
   * -> 이러한 방식을 프로그래밍에 접목시켜보기. 사람에게는 다양한 속성이 있으나 우리가 구현하려는 프로그램에서는 사람의 "이름"과 "주소"라는 속성에만
   * 관심이 있다고 가정하면, 이처럼 다양한 속성 중에서 프로그램에 필요한 속성만 간추려 내어 표현하는 것을 ✅추상화(abstraction)라 한다.
   */
  // 이름과 주소 속성을 갖는 객체
  const person = {
    name: 'Lee',
    address: 'Seoul',
  };
  console.log(person); // {name: 'Lee', address: 'Seoul'}
  // 이름과 주소 속성으로 표현된 객체(object)인 person을 다른 객체와 구별하여 인식할 수 있다.
  // 이처럼 ✅속성을 통해 여러 개의 값을 하나의 단위로 구성한 복합적인 자료구조를 객체라 하며,
  // 객체지향 프로그래밍은 독립적인 객체의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임이다.
}

{
  /**
   * 🔍 상속과 프로토타입
   * 상속(Inheritance)은 객체지향 프로그래밍의 핵심 개념으로, 어떤 객체의 프로퍼티 또는 메서드를 다른 객체가 상속받아 그대로 사용할 수 있는 것을 말한다.
   * 상속을 사용하면 -> 불필요한 중복을 제거한다. 중복을 제거하는 방법은 기존의 코드를 적극적으로 재사용하는 것이다.
   * 코드 재사용은 개발 비용을 현저히 줄일 수 있는 잠재력이 있으므로 매우 중요하다.
   *
   * ✅ 자바스크립트는 프로토타입을 기반으로 상속을 구현한다.
   */
}
