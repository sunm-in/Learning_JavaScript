'use strict';
{
  /**
   * Scope 스코프(유효범위)는 자바스크립트를 포함한 모든 프로그래밍 언어의 기본적이며 중요한 개념이다.
   * var 키워드로 선언한 변수와 let 또는 const 키워드로 선언한 변수의 스코프도 다르게 동작한다.
   *
   * 함수의 매개변수는 함수 몸체 내부에서만 참조할 수 있고 함수 몸체 외부에서는 참조할 수 없다.
   * 이것은 매개변수를 참조할 수 있는 유효범위, 즉 매개변수의 스코프가 함수 몸체 내부로 한정되기 때문이다.
   */
  function add(x, y) {
    // 매개변수는 함수 몸체 내부에서만 참조할 수 있다.
    // 즉, 매개변수의 스코프(유효범위)는 함수 몸체 내부다.
    console.log(x, y); // 2 5
    return x + y;
  }

  add(2, 5);

  // 매개변수는 함수 몸체 내부에서만 참조할 수 있다.
  // console.log(x, y); // ReferenceError: x is not defined
}

{
  /**
   * 변수는 코드의 가장 바깥 영역뿐 아니라 코드 블록이나 함수 몸체 내에서도 선언할 수 있다.
   * 이때 코드 블록이나 함수는 중첩될 수 있다.
   */

  /**
   * 변수는 자신이 선언된 위치에 의해 자신이 유효한 범위, 즉 다른 코드가 변수 자신을 참조할 수 있는 범위가 결정된다.
   * 변수 뿐만 아니라 모든 식별자가 그렇다.
   *
   * ✨모든 식벽자(변수 이름, 함수 이름, 클래스 이름 등)는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정된다.✨
   * ✨이를 스코프라 한다. 즉, 스코프는 식별자가 유효한 범위를 말한다.✨
   */
  var x = 'global';

  function foo() {
    var x = 'local';
    console.log(x); // 1
  }
  foo();
  console.log(x); // 2
  // 이름이 같은 두 개의 변수 중에서 어떤 변수를 참조해야 할 것인지를 결정해야 한다. -> 식별자 결정(identifier resolution)
  // 스코프는 자바스크립트 엔진이 식별자를 검색할 때 사용하는 규칙이라고도 할 수 있다.
  // 프로그래밍 언어에서는 스코프를 통해 식별자인 변수 이름의 충돌을 방지하여 같은 이름의 변수를 사용할 수 있게 한다.
  // 스코프 내에서 식별자는 유일해야 하지만 다른 스코프에는 같은 이름의 식별자를 사용할 수 있다. 즉, 스코프는 네임스페이스다.
}

{
  // 🔍 var 키워드로 선언한 변수의 중복 선언
  // var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언이 허용된다. 이는 의도치 않게 변수값이 재할당되어 변경되는 부작용을 발생시킨다.
  function foo() {
    var x = 1;
    var x = 2;
    console.log(x); // 2
  }
  foo();

  // 🔍 let이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용하지 않는다.
  function bar() {
    let x = 1;
    // let x = 2; // SyntaxError: Identifier 'x' has already been declared
  }
  bar();
}
console.clear();
{
  /**
   * 🔍 스코프의 종류
   * 코드는 전역(global)과 지역(local)으로 구분할 수 있다.
   * 전역 -> 코드의 가장 바깥 영역, 스코프 -> 전역 스코프, 변수 -> 전역 변수
   * 지역 -> 함수 몸체 내부, 스코프 -> 지역 스코프, 변수 -> 지역 변수
   */
  let x = 'global x'; // 전역 스코프 ✅
  let y = 'global y';

  function outer() {
    let z = "outer's local z"; // 지역 스코프 ✅

    console.log(x); // global x
    console.log(y); // global y
    console.log(z); // outer's local z

    function inner() {
      let x = "inner's local x"; // 지역 스코프 ✅

      console.log(x); // inner's local x
      console.log(y); // global y
      console.log(z); // outer's local z
    }
    inner();
  }
  outer();

  console.log(x); // global x
  // console.log(z); // ReferenceError: z is not defined

  // 전역 변수는 어디서든지 참조할 수 있다.
  // 지역 변수는 자신의 지역 스코프와 하위 지역 스코프애서 유효하다.

  /**
   * 함수는 중첩될 수 있으므로 함수의 지역 스코프도 중첩될 수 있다.
   * 이는 ✨ 스코프가 함수의 중첩에 의해 계층적 구조를 갖는다. ✨
   * 계층적으로 연결된 것을 스코프 체인(scope chain)이라 한다.
   *
   * 변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여
   * 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다.
   *
   * 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만
   * 하위 스포크에서 유효한 변수를 상위 스코프에서 참조할 수 없다.
   */
  console.clear();
}

{
  /**
   * 🔍 함수 레벨 스코프
   * 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성된다.
   *
   * 대부분의 프로그래밍 언어는 함수 몸체만이 아닌 모든 코드 블록(if, for, while, try/catch 등)이 지역 스코프를 만든다.
   * 이러한 특성을 블록 레벨 스코프(block level scope)라 한다.
   *
   * 하지만 var 키워드로 선언된 변수는 오로지 함수의 코드 블록(함수 몸체)만을 지역 스코프로 인정한다.
   * 이러한 특성을 함수 레벨 스코프(function level scope)라 한다.
   */
}

{
  /**
   * 🔍 렉시컬 스코프
   */
  var x = 1;

  function foo() {
    var x = 10;
    bar();
  }

  function bar() {
    console.log(x);
  }
  foo();
  bar();

  /**
   * 자바스크립트는 렉시컬 스코프를 따르므로 함수를 어디서 호출했는지가 아니라 함수를 어디서 정의했는지에 따라 상위 스코프를 결정한다.
   * 함수가 호출된 상위 스코프 결정에 어떠한 영향도 주지 않는다.
   * 즉, 함수의 상위 스코프는 언제나 자신이 정의된 스코프다.
   *
   * 이처럼 함수의 상위 스코프는 함수 정의가 실행될 때 정적으로 결정된다.
   * 함수 정의(함수 선언문 또는 함수 표현식)가 실행되어 생성된 함수 객체는 이렇게 결정된 상위 스코프를 기억한다.
   * 함수가 호출될 때마다 함수의 상위 스코프를 참조할 필요가 이씩 때문이다.
   */
}
